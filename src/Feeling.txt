交互性强的应用使用起来很方便。
但是使用回调很麻烦。需要在下方回调上方的方法来设置state。（例如SearchBar要回调FilterableProductTable的方法）
组件化之后可以方便复用
对于常见的条件过滤需要组件包来处理（应该已经有了吧）
对于state应该存放的key值的选择需要多加思考。（一般应该是放条件而非过滤之后的结果）
state存放的原则是Lifting State Up（存放在共同的调用其组件的类里面，如果没有可以考虑添加一个专门的类来存放state并且引入其他组件）
组件比继承更具有优势
handleEventMethod 需要bind(this)(https://reactjs.org/docs/react-without-es6.html):
	If you’d rather play it safe, you have a few options:
		*Bind methods in the constructor.
		*Use arrow functions, e.g. onClick={(e) => this.handleClick(e)}.
		*Keep using createReactClass.
个人认为arrow function比较好。需要code的代码比较少。（可以参考commit  685803529b1e9ac46db185399acca40b078d9e61
业务逻辑有一部分放在了前台，是不是有点问题（比如if条件判断什么的。还会暴露一部分在数据库里面的值）
真的用得到这么复杂的框架么？感觉现在为止的项目还用不到这样的。
后台用什么
怎么交互
form怎么办
怎么验证
为什么那么喜欢用const
 Don’t try to synchronize states of two different components. Instead, lift it up to their closest shared ancestor, and pass it down as props to both of them.
